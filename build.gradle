buildscript {
    ext {
        queryDslVersion = "5.0.0"
        mapstructVersion = "1.4.2.Final"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    // querydsl 추가
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.adgile'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
}

dependencies {

    // JPA, 스프링 데이터 JPA 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.1.2'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'

    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Strings.isEmpty .. object null check
    implementation 'org.apache.commons:commons-lang3:3.9'


    // Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // mysql connector
    runtimeOnly 'mysql:mysql-connector-java'

    // flyway
//    implementation 'org.flywaydb:flyway-core:7.10.0'
//    implementation 'org.flywaydb:flyway-core'
    // mysql 8.0 이상이거나 mariadb 사용하면 하단에 있는것도 추가해야한다.
    implementation 'org.flywaydb:flyway-mysql'


    // map struct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // google guava new Array List
    // new list Lists.newArrayList()
    implementation 'com.google.guava:guava:30.1-jre'

    annotationProcessor(
            'org.projectlombok:lombok',
            'org.projectlombok:lombok-mapstruct-binding:0.1.0',
    )
}

compileJava {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true',
            '-Amapstruct.verbose=true'
    ]
}

tasks.named('test') {
    useJUnitPlatform()
}

// map struct
tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

// querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

jar {
    enabled = false
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
/**
 * comileQuerydsl.doFirst 추가
 */

compileQuerydsl.doFirst {
    if(file(querydslDir).exists() )
        delete(file(querydslDir))
}

// Querydsl 추가, 자동 생성된 Q클래스 gradle clean 으로 제거
clean {
    delete file("$buildDir/generated")
}
// querydsl 추가 끝